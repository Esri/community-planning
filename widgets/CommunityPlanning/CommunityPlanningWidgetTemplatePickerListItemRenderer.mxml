<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.1.1
 | Copyright 2010 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<!---
@private
Custom item renderer for custom TemplatePicker skin.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:mx="library://ns.adobe.com/flex/mx"
				name="CommunityPlanningWidgetTemplatePickerListItemRenderer"
				focusEnabled="false" width="100%" height="100%"
				mouseChildren="false" >

	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>

	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" horizontalAlign="left"
							paddingLeft="4" paddingTop="4" paddingBottom="4" />
	</s:layout>

	<fx:Script>
		<![CDATA[
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;

			import flashx.textLayout.formats.TextAlign;

			import mx.core.IVisualElement;

			override public function set data(value:Object):void
			{
				super.data = value;

				//First remove everything from the contentGroup
				contentGroup.removeAllElements();

				// set style on the label
				templateLabel.setStyle("textAlign", TextAlign.LEFT);

				if (value.featureTemplate)
				{
					templateLabel.text = value.featureTemplate.name;
					toolTip = (value.featureTemplate.description != "") ? value.featureTemplate.name + ": " + value.featureTemplate.description : value.featureTemplate.name;
				}

				if (value.featureLayer.renderer)
				{
					var symbol:Symbol = value.featureLayer.renderer.getSymbol(value.featureTemplate.prototype);
					if (symbol)
					{
						contentGroup.addElement(IVisualElement(symbol.createSwatch(contentGroup.width, contentGroup.height)));
					}
					else
					{
						enabled = false;
					}
				}
				else if (value.featureLayer.symbol)
				{
					contentGroup.addElement(IVisualElement(Symbol(value.featureLayer.symbol).createSwatch(contentGroup.width, contentGroup.height)));
				}
				else
				{
					contentGroup.addElement(IVisualElement(getDefaultSymbolBasedOnGeometry(value.featureLayer).createSwatch(contentGroup.width, contentGroup.height)));
				}
			}

			private function getDefaultSymbolBasedOnGeometry(fLayer:FeatureLayer):Symbol
			{
				var sym:Symbol;
				switch (fLayer.layerDetails.geometryType)
				{
					case Geometry.MAPPOINT:
					{
						sym = new SimpleMarkerSymbol();
						break;
					}
					case Geometry.POLYLINE:
					{
						sym = new SimpleLineSymbol();
						break;
					}
					case Geometry.POLYGON:
					{
						sym = new SimpleFillSymbol();
						break;
					}
				}
				return sym;
			}
		]]>
	</fx:Script>

	<s:Group id="contentGroup"
			 width="28" height="28"/>
	<s:Label id="templateLabel" />
</s:ItemRenderer>
